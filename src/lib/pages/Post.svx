<script lang="ts">
	import type { IContext } from "$lib";
	import { getContext, onMount } from "svelte";
	import { Clock, Calendar, ChevronRight } from 'svelte-feathers';
	import { calculateReadingTime, normalizeApostrophes, updateUrl } from '$lib';
    import { fade } from "svelte/transition";
    
    let { post, compiledHtml, headers } = $props();
    let contentDiv: HTMLDivElement;

    onMount(() => {
        if (contentDiv) {
            headers.forEach(header => {
                const elements = contentDiv.querySelectorAll(`h${header.level}`);
                for (const element of elements) {
                    
                    if (normalizeApostrophes(element.textContent.trim()) === normalizeApostrophes(header.text)) {
                        element.id = header.id;
                        element.addEventListener('click', () => updateUrl(header.id));
                        element.style.cursor = 'pointer';

                        break;
                    }
                }
            });
        }
    });
</script>

<div class="flex flex-col w-full gap-5 max-w-[90vw] lg:~max-w-2xl/4xl"> 
<div class="flex flex-col gap-2.5">
<div class="flex flex-col size-full md:h-80 gap-1.5 rounded-lg" style="background-image: url({post.image}); background-size: cover; background-position: center;">
    <div class="flex size-full place-content-center flex-col gap-2.5 md:place-items-center bg-neutral-900/60 text-neutral-100 p-2.5 rounded-lg">
            <h1 class="font-bold text-3xl break-words">{post.title}</h1>
            <p class="md:text-center">{post.description}</p>
	        <div class="flex gap-3 text-start ~text-xs/sm flex-wrap">
                <div class="flex gap-1.5">
                    <Calendar class="size-4" />
		            <p>
                        {post.date.toLocaleDateString('en-GB', { 
                            day: 'numeric', 
                            month: 'long', 
                            year: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                        })}
		            </p>
                </div>
                <div class="flex gap-1.5">
                    <Clock class="size-4" />
		            <p>{calculateReadingTime(post.content)} minutes read</p>
                </div>
	        </div>
    </div>
</div>
        <p class="text-xs credit">{@html post.imageCredit}</p>
    </div>
    <div bind:this={contentDiv} class="prose w-full max-w-none mt-3 content">
        {@html compiledHtml.code}
    </div>
</div>

<style>
    :global(.credit a) {
        @apply text-blue-500;
    }
    :global(.content h2) {
        scroll-margin-top: 100px; 
    }
    :global(.content h1:hover),
    :global(.content h2:hover),
    :global(.content h3:hover),
    :global(.content h4:hover),
    :global(.content h5:hover),
    :global(.content h6:hover) {
        text-decoration: underline;
    }
</style>